// <concepts> -*- C++ -*-

// Copyright (C) 2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/any
 *  This is a Standard C++ Library header.
 */

#ifndef _GLIBCXX_CONCEPTS
#define _GLIBCXX_CONCEPTS 1

#pragma GCC system_header

#if __cplusplus >= 201703L

#include <type_traits>
#include <utility>

template<typename... _Tps>
  struct common_reference
  {/* FIXME */};

template<typename... _Tps>
  using common_reference_t = typename common_reference<_Tps...>::type;
		
template<typename _Tp, typename _Up,
	 template<typename> typename _TQual, template<typename> typename _UQual>
  struct basic_common_reference
  { };

#define _GLIBCXX_CONCEPT_BOOL bool

namespace std _GLIBCXX_VISIBILITY(default)
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  // 17.4, language-related concepts

  // 17.4.2, concept same_as
  template<typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL same_as = is_same_v<_Tp, _Up>;

  // 17.4.3, concept derived_from
  template<typename _Derived, typename _Base>
    concept _GLIBCXX_CONCEPT_BOOL derived_from
      = is_base_of_v<_Base, _Derived>
	&& is_convertible_v<const volatile _Derived*, const volatile _Base*>;

  // 17.4.4, concept convertible_to
  template<typename From, typename To>
    concept _GLIBCXX_CONCEPT_BOOL convertible_to
      = is_convertible_v<From, To>
	&& requires(From (&f)())
	   { static_cast<To>(f()); };

  // 17.4.5, concept has_common_reference
  template<typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL has_common_reference
      = same_as<common_reference_t<_Tp, _Up>, common_reference_t<_Up, _Tp>>
	&& convertible_to<_Tp, common_reference_t<_Tp, _Up>>
	&& convertible_to<_Up, common_reference_t<_Tp, _Up>>;

  // 17.4.6, concept has_common_type
  template<typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL has_common_type
      = same_as<common_type_t<_Tp, _Up>, common_type_t<_Up, _Tp>>
	&& convertible_to<_Tp, common_type_t<_Tp, _Up>>
	&& convertible_to<_Up, common_type_t<_Tp, _Up>>
	&& has_common_reference<add_lvalue_reference_t<const _Tp>,
			   add_lvalue_reference_t<const _Up>>
	&& has_common_reference<add_lvalue_reference_t<common_type_t<_Tp, _Up>>,
			 common_reference_t<add_lvalue_reference_t<const _Tp>,
					    add_lvalue_reference_t<const _Up>>>;

  // 17.4.7, arithmetic concepts
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL integral = is_integral_v<_Tp>;

  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL signed_integral
      = integral<_Tp> && is_signed_v<_Tp>;

  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL unsigned_integral
      = integral<_Tp> && !signed_integral<_Tp>;

  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL floating_point
      = is_floating_point_v<_Tp>;

  // 17.4.8, concept assignable_from
  template<typename _LHS, typename _RHS>
    concept _GLIBCXX_CONCEPT_BOOL assignable_from
      = is_lvalue_reference_v<_LHS>
	&& has_common_reference<const remove_reference_t<_LHS>&,
			   const remove_reference_t<_RHS>&>
	&& requires(_LHS __lhs, _RHS&& __rhs)
	   {
	     __lhs = std::forward<_RHS>(__rhs);
	     requires same_as<decltype(__lhs = std::forward<_RHS>(__rhs)), _LHS>;
	   };

  // 17.4.9, concept swappable
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL swappable = is_swappable_v<_Tp>;

  template<typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL swappable_with
      = is_swappable_with_v<_Tp, _Tp>&&  is_swappable_with_v<_Up, _Up>
	&& has_common_reference<const remove_reference_t<_Tp>&,
			   const remove_reference_t<_Up>&>
	&& is_swappable_with_v<_Tp, _Up> && is_swappable_with_v<_Up, _Tp>;

  // 17.4.10, concept destructible
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL destructible = is_nothrow_destructible_v<_Tp>;

  // 17.4.11, concept constructible
  template<typename _Tp, typename... _Args>
    concept _GLIBCXX_CONCEPT_BOOL constructible
      = destructible<_Tp> && is_constructible_v<_Tp, _Args...>;

  // 17.4.12, concept default_constructible
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL default_constructible = constructible<_Tp>;

  // 17.4.13, concept move_constructible
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL move_constructible
      = constructible<_Tp, _Tp> && convertible_to<_Tp, _Tp>;

  // 17.4.14, concept copy_constructible
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL copy_constructible
      = move_constructible<_Tp>
	&& constructible<_Tp, _Tp&> && convertible_to<_Tp&, _Tp>
	&& constructible<_Tp, const _Tp&> && convertible_to<const _Tp&, _Tp>
	&& constructible<_Tp, const _Tp> && convertible_to<const _Tp, _Tp>;

  // 17.5, comparison concepts

  // Predefine movable.
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL movable
      = is_object_v<_Tp> && move_constructible<_Tp>
	&& assignable_from<_Tp&, _Tp> && swappable<_Tp>;

  // 17.5.2, concept Boolean
  template<typename _Bp>
    concept _GLIBCXX_CONCEPT_BOOL Boolean
      = movable<remove_cvref_t<_Bp>>
	&& requires(const remove_reference_t<_Bp>& __b1,
		    const remove_reference_t<_Bp>& __b2, const bool __a)
	   {
	     requires convertible_to<const remove_reference_t<_Bp>&, bool>;
	     !__b1;      requires convertible_to<decltype(!__b1), bool>;
	     __b1 && __a;  requires same_as<decltype(__b1 && __a), bool>;
	     __b1 || __a;  requires same_as<decltype(__b1 || __a), bool>;
	     __b1 && __b2; requires same_as<decltype(__b1 && __b2), bool>;
	     __a && __b2;  requires same_as<decltype( __a && __b2), bool>;
	     __b1 || __b2; requires same_as<decltype(__b1 || __b2), bool>;
	     __a || __b2;  requires same_as<decltype( __a || __b2), bool>;
	     __b1 == __b2; requires convertible_to<decltype(__b1 == __b2), bool>;
	     __b1 == __a;  requires convertible_to<decltype(__b1 == __a), bool>;
	     __a == __b2;  requires convertible_to<decltype( __a == __b2), bool>;
	     __b1 != __b2; requires convertible_to<decltype(__b1 != __b2), bool>;
	     __b1 != __a;  requires convertible_to<decltype(__b1 != __a), bool>;
	     __a != __b2;  requires convertible_to<decltype( __a != __b2), bool>;
	   };

  template<typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL __weakly_equality_comparable_with
      = requires(const remove_reference_t<_Tp>& __t,
		 const remove_reference_t<_Up>& __u)
	{
	  __t == __u; requires Boolean<decltype(__t == __u)>;
	  __t != __u; requires Boolean<decltype(__t != __u)>;
	  __u == __t; requires Boolean<decltype(__u == __t)>;
	  __u != __t; requires Boolean<decltype(__u != __t)>;
	};

  // 17.5.3, concept equality_comparable
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL equality_comparable
      = __weakly_equality_comparable_with<_Tp, _Tp>;

  template<typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL equality_comparable_with
      = equality_comparable<_Tp> && equality_comparable<_Up>
	&& has_common_reference<const remove_reference_t<_Tp>&,
			   const remove_reference_t<_Up>&>
	&& equality_comparable<common_reference_t<
				const remove_reference_t<_Tp>&,
				const remove_reference_t<_Up>&>>
	&& __weakly_equality_comparable_with<_Tp, _Up>;

  // 17.5.4, concept totally_ordered
  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL totally_ordered
      = equality_comparable<_Tp>
	&& requires(const remove_reference_t<_Tp>& __a,
		    const remove_reference_t<_Tp>& __b)
	   {
	     __a < __b;  requires Boolean<decltype(__a < __b)>;
	     __a > __b;  requires Boolean<decltype(__a > __b)>;
	     __a <= __b; requires Boolean<decltype(__a <= __b)>;
	     __a >= __b; requires Boolean<decltype(__a >= __b)>;
	   };

  template<typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL totally_ordered_with
      = totally_ordered<_Tp> && totally_ordered<_Up>
	&& has_common_reference<const remove_reference_t<_Tp>&,
			   const remove_reference_t<_Up>&>
	&& totally_ordered<common_reference_t<
				const remove_reference_t<_Tp>&,
				const remove_reference_t<_Up>&>>
	&& equality_comparable_with<_Tp, _Up>
	&& requires(const remove_reference_t<_Tp>& __t,
		    const remove_reference_t<_Up>& __u)
	   {
	     __t < __u;  requires Boolean<decltype(__t < __u)>;
	     __t > __u;  requires Boolean<decltype(__t > __u)>;
	     __t <= __u; requires Boolean<decltype(__t <= __u)>;
	     __t >= __u; requires Boolean<decltype(__t >= __u)>;
	     __u < __t;  requires Boolean<decltype(__u < __t)>;
	     __u > __t;  requires Boolean<decltype(__u > __t)>;
	     __u <= __t; requires Boolean<decltype(__u <= __t)>;
	     __u >= __t; requires Boolean<decltype(__u >= __t)>;
	   };

  // 17.6, object concepts

  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL movable
      = is_object_v<_Tp> && move_constructible<_Tp>
	&& assignable_from<_Tp&, _Tp> && swappable<_Tp>;

  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL copyable
      = copy_constructible<_Tp> && movable<_Tp> && assignable_from<_Tp&, const _Tp&>;

  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL semiregular
      = copyable<_Tp> && default_constructible<_Tp>;

  template<typename _Tp>
    concept _GLIBCXX_CONCEPT_BOOL regular
      = semiregular<_Tp> && equality_comparable<_Tp>;

  // 17.7, callable concepts

  // 17.7.2, concept invocable
  template<typename F, typename... _Args>
    concept _GLIBCXX_CONCEPT_BOOL invocable
      = requires(F&& f, _Args&&... args)
	{ invoke(std::forward<F>(f), std::forward<_Args>(args)...); };

  // 17.7.3, concept regular_invocable
  template<typename F, typename... _Args>
    concept _GLIBCXX_CONCEPT_BOOL regular_invocable = invocable<F, _Args...>;

  // 17.7.4, concept predicate
  template<typename F, typename... _Args>
    concept _GLIBCXX_CONCEPT_BOOL predicate
      = regular_invocable<F, _Args...>
	&& Boolean<invoke_result_t<F, _Args...>>;

  // 17.7.5, concept relation
  template<typename _Rp, typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL relation
      = predicate<_Rp, _Tp, _Tp> && predicate<_Rp, _Up, _Up>
	&& has_common_reference<const remove_reference_t<_Tp>&,
			   const remove_reference_t<_Up>&>
	&& predicate<_Rp, common_reference_t<const remove_reference_t<_Tp>&,
					     const remove_reference_t<_Up>&>,
			  common_reference_t<const remove_reference_t<_Tp>&,
					     const remove_reference_t<_Up>&>>
	&& predicate<_Rp, _Tp, _Up> && predicate<_Rp, _Up, _Tp>;

  // 17.7.6, concept weakly_ordered
  template<typename _Rp, typename _Tp, typename _Up>
    concept _GLIBCXX_CONCEPT_BOOL weakly_ordered = relation<_Rp, _Tp, _Up>;

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace std

#endif // C++20

#endif // _GLIBCXX_CONCEPTS
